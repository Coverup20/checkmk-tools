#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Mail RealIP Hybrid Safe
#
# Conservative FRP-aware variant:
# - Detects FRP via label (NOTIFY_HOSTLABEL_frp=true) if present, else fallback to 127.0.0.1/localhost/::1
# - Rewrites ONLY URLs in text/html (href/src pointing to 127.0.0.1|localhost|::1[:PORT]) to real_ip
# - Rewrites full IP occurrences in text/plain
# - Does NOT touch other HTML content to avoid MIME/encoding corruption
# - Does NOT attempt to inject graphs (RAW 2.4 graph emails not guaranteed)
# Bulk: yes

import os
import re
import sys
from cmk.notification_plugins import mail


def log_debug(msg: str) -> None:
    if os.environ.get("DEBUG_MAIL_HYBRID", "0") == "1":
        print(f"[SAFE] {msg}", file=sys.stderr)


URL_TARGETS = re.compile(r"(https?://)(\[::1\]|127\.0\.0\.1|localhost)(:\d+)?", re.IGNORECASE)


def detect_frp() -> tuple[bool, str, str]:
    host_address = os.environ.get("NOTIFY_HOSTADDRESS", "")
    real_ip = os.environ.get("NOTIFY_HOSTLABEL_real_ip", "")
    frp_label = os.environ.get("NOTIFY_HOSTLABEL_frp", "")

    loopbacks = ("127.0.0.1", "localhost", "::1")
    by_loopback = any(host_address.startswith(p) for p in loopbacks)
    by_label = frp_label.lower() in ("1", "true", "yes")

    is_frp = bool(real_ip) and (by_label or by_loopback)
    log_debug(f"FRP? {is_frp} | host={host_address} real_ip={real_ip} label={frp_label}")
    return is_frp, real_ip, host_address


def rewrite_html_urls(html: str, original_addr: str, real_ip: str) -> str:
    # Replace absolute URLs that point to loopback with real_ip
    def _sub(m: re.Match) -> str:
        proto = m.group(1)
        port = m.group(3) or ""
        return f"{proto}{real_ip}{port}"

    html2 = URL_TARGETS.sub(_sub, html)
    # Also replace bare original_addr when it appears inside links
    if original_addr:
        html2 = html2.replace(original_addr, original_addr.replace("127.0.0.1", real_ip))
    # Do NOT touch other content (styles, classes, etc.)
    return html2


def add_graph_links(html: str, real_ip: str) -> str:
    """Add graph links to HTML if not present in FRP scenario"""
    import urllib.parse
    
    hostname = os.environ.get("NOTIFY_HOSTNAME", "")
    servicedesc = os.environ.get("NOTIFY_SERVICEDESC", "")
    
    if not hostname:
        return html
    
    # Build graph URLs with CheckMK server public URL (not the monitored host IP)
    base_url = "https://monitor.nethlab.it/monitoring"
    hostname_enc = urllib.parse.quote(hostname)
    
    if servicedesc:  # Service notification
        servicedesc_enc = urllib.parse.quote(servicedesc)
        graph_url = f"{base_url}/check_mk/view.py?view_name=service&host={hostname_enc}&service={servicedesc_enc}"
        pnp_url = f"{base_url}/check_mk/pnp4nagios/graph?host={hostname_enc}&srv={servicedesc_enc}"
    else:  # Host notification
        graph_url = f"{base_url}/check_mk/view.py?view_name=host&host={hostname_enc}"
        pnp_url = f"{base_url}/check_mk/pnp4nagios/graph?host={hostname_enc}"
    
    # Add graph links section if not already present
    if "grafici" not in html.lower() and "graph" not in html.lower():
        graph_section = f"""
<hr>
<p><strong>ðŸ“Š Grafici:</strong></p>
<ul>
<li><a href="{graph_url}">ðŸ”— Vista CheckMK</a></li>
<li><a href="{pnp_url}">ðŸ“ˆ Grafici PNP</a></li>
</ul>
"""
        # Insert before closing body or at the end
        if "</body>" in html:
            html = html.replace("</body>", graph_section + "</body>")
        else:
            html += graph_section
    
    return html


def patched_send(message, target, from_address):
    is_frp, real_ip, original_addr = detect_frp()
    if not (is_frp and real_ip):
        return mail._original_send(message, target, from_address)

    # Walk only text/plain and text/html parts
    for part in message.walk() if hasattr(message, "walk") else []:
        ctype = part.get_content_type()
        if ctype == "text/plain":
            payload = part.get_payload(decode=True)
            if not payload:
                continue
            text = payload.decode(part.get_content_charset() or "utf-8", errors="replace")
            text = text.replace("127.0.0.1", real_ip)
            if original_addr:
                text = text.replace(original_addr, original_addr.replace("127.0.0.1", real_ip))
            # preserve charset
            charset = part.get_content_charset() or "utf-8"
            if "Content-Transfer-Encoding" in part:
                del part["Content-Transfer-Encoding"]
            part.set_payload(text, charset=charset)
        elif ctype == "text/html":
            payload = part.get_payload(decode=True)
            if not payload:
                continue
            html = payload.decode(part.get_content_charset() or "utf-8", errors="replace")
            html2 = rewrite_html_urls(html, original_addr, real_ip)
            # Add graph links for FRP scenario
            html2 = add_graph_links(html2, real_ip)
            charset = part.get_content_charset() or "utf-8"
            if "Content-Transfer-Encoding" in part:
                del part["Content-Transfer-Encoding"]
            part.set_payload(html2, charset=charset)

    return mail._original_send(message, target, from_address)


def main():
    # Ensure subject/body exist to satisfy plugin expectations
    os.environ.setdefault("PARAMETER_SUBJECT", "$WHAT$ on $HOSTNAME$/$SERVICEDESC$")
    os.environ.setdefault("PARAMETER_BODY", "")

    # Monkey-patch send function conservatively
    if not hasattr(mail, "_original_send"):
        mail._original_send = mail.send_mail_sendmail
        mail.send_mail_sendmail = patched_send

    try:
        mail.main()
    except Exception as e:
        print(f"SAFE plugin error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
