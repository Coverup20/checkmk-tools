#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Email con Real IP e Grafici
# HTML Email: yes
# Bulk: yes
# 3. Mantiene funzionalità complete email HTML
#
# INSTALLAZIONE:
# 1. Copiare in /opt/omd/sites/SITENAME/local/share/check_mk/notifications/
# 2. Rendere eseguibile: chmod +x mail_realip_graphs
# 3. Configurare nelle regole di notifica
#
# LABELS RICHIESTI:
# - Il host deve avere label "real_ip" con l'IP pubblico reale

import os
import sys
from email.message import Message
from typing import NoReturn, Dict, Optional

# Import CheckMK standard
from cmk.notification_plugins.mail import (
    extend_context,
    render_performance_graphs,
    body_templates,
    BODY_ELEMENTS,
    TemplateRenderer,
    send_mail,
)
from cmk.notification_plugins import utils
from cmk.utils.mail import (
    Attachment,
    default_from_address,
    MailString,
    multipart_mail,
)


def get_real_ip_from_context(context: Dict[str, str]) -> Optional[str]:
    """
    Estrae il real_ip dai label del host.
    
    CheckMK espone i label come NOTIFY_HOSTLABEL_<nome_label>
    Cerchiamo specificamente 'real_ip'
    """
    # Controlla label real_ip con prefisso NOTIFY_
    real_ip = context.get("NOTIFY_HOSTLABEL_real_ip")
    if real_ip:
        return real_ip.strip()
    
    # Fallback: anche senza prefisso per compatibilità
    real_ip = context.get("HOSTLABEL_real_ip")
    if real_ip:
        return real_ip.strip()
    
    # Fallback: altri possibili nomi con prefisso NOTIFY_
    for key in ["NOTIFY_HOSTLABEL_external_ip", "NOTIFY_HOSTLABEL_public_ip", "HOSTLABEL_external_ip", "HOSTLABEL_public_ip"]:
        if key in context:
            return context[key].strip()
    
    return None


def modify_monitoring_host(context: Dict[str, str]) -> str:
    """
    Modifica MONITORING_HOST per usare real_ip se disponibile.
    
    Returns:
        L'IP effettivo da usare (real_ip o quello originale)
    """
    real_ip = get_real_ip_from_context(context)
    original_host = context.get("MONITORING_HOST", "")
    
    if real_ip and real_ip != original_host:
        print(f"Real IP trovato: {real_ip} (sostituisce {original_host})")
        context["MONITORING_HOST"] = real_ip
        
        # Aggiorna anche HOSTADDRESS se è localhost
        if context.get("HOSTADDRESS") == "127.0.0.1":
            context["HOSTADDRESS"] = real_ip
        
        return real_ip
    
    return original_host


def patched_extend_context(context: dict[str, str], is_bulk: bool = False) -> None:
    """
    Versione modificata di extend_context che usa real_ip.
    
    Prima aggiorna il contesto con real_ip, poi chiama la funzione originale.
    """
    # Modifica MONITORING_HOST per usare real_ip
    effective_ip = modify_monitoring_host(context)
    
    # Chiama la funzione extend_context originale di CheckMK
    # Ora userà il real_ip per generare tutti gli URL
    extend_context(context, is_bulk)
    
    # Debug output
    if "GRAPH_URL" in context:
        print(f"GRAPH_URL generato: {context['GRAPH_URL']}")


def patched_render_performance_graphs(context: dict[str, str]) -> tuple[list[Attachment], list[str]]:
    """
    Versione modificata di render_performance_graphs che usa real_ip.
    
    La chiave è modificare MONITORING_HOST prima di chiamare render_cmk_graphs().
    """
    # Salva l'IP originale
    original_monitoring_host = context.get("MONITORING_HOST")
    
    # Usa real_ip se disponibile
    effective_ip = modify_monitoring_host(context)
    
    try:
        # Chiama la funzione originale CheckMK per generare grafici
        # Ora ajax_graph_images.py userà il real_ip
        attachments, file_names = render_performance_graphs(context)
        
        print(f"Grafici generati con IP {effective_ip}: {len(file_names)} allegati")
        return attachments, file_names
        
    except Exception as e:
        print(f"Errore nella generazione grafici: {e}")
        return [], []
    finally:
        # Ripristina l'IP originale se era diverso
        if original_monitoring_host and original_monitoring_host != effective_ip:
            context["MONITORING_HOST"] = original_monitoring_host


def patched_construct_content(
    context: dict[str, str],
    is_bulk: bool = False,
    bulk_summary: list[dict[str, str]] | None = None,
    last_bulk_entry: bool = False,
    notification_number: int = 1,
) -> tuple[str, str, list[Attachment]]:
    """
    Versione modificata di construct_content con real_ip e grafici abilitati.
    
    DIFFERENZA PRINCIPALE da mail_realip_00:
    - NON rimuove 'graph' dagli elementi
    - NON disabilita i grafici
    - Usa real_ip per URL e generazione grafici
    """
    
    # Gestione elementi email (identica a mail.py standard)
    if "PARAMETER_ELEMENTSS" in context:
        elements = context["PARAMETER_ELEMENTSS"].split()
    else:
        elements = ["graph", "abstime", "address", "longoutput"]

    # Gestione bulk con grafici (identica a mail.py standard)
    if is_bulk and "graph" in elements:
        notifications_with_graphs = context["PARAMETER_NOTIFICATIONS_WITH_GRAPHS"]
        if notification_number > int(notifications_with_graphs):
            elements.remove("graph")

    # Genera template testuale
    template_txt = body_templates(
        context["WHAT"].lower(),
        "ALERTHANDLEROUTPUT" in context,
        elements,
        BODY_ELEMENTS,
    )
    content_txt = utils.substitute_context(template_txt, context)

    # Genera grafici con real_ip (DIFFERENZA CHIAVE!)
    attachments: list[Attachment] = []
    file_names: list[str] = []
    if "graph" in elements and "ALERTHANDLEROUTPUT" not in context:
        try:
            # USA LA NOSTRA VERSIONE MODIFICATA
            attachments, file_names = patched_render_performance_graphs(context)
        except Exception as e:
            sys.stderr.write("Failed to add graphs to mail. Continue without them. (%s)\n" % e)

    # Genera contenuto HTML usando template CheckMK
    content_html = utils.substitute_context(
        TemplateRenderer().render_template(
            "base.html.jinja",
            {
                "data": context,
                "graphs": file_names,
                "elements": elements,
                "elements_without_graph": [e for e in elements if e != "graph"],
            },
        ),
        context,
    )

    return content_txt, content_html, attachments


def main() -> NoReturn:
    """
    Funzione principale modificata per real_ip + grafici.
    
    Sostituisce le funzioni CheckMK con le nostre versioni patched,
    poi procede normalmente.
    """
    print("=== MAIL REALIP WITH GRAPHS ===")
    
    try:
        # Raccoglie contesto
        context = utils.collect_context()
        
        # Debug informazioni
        real_ip = get_real_ip_from_context(context)
        print(f"Real IP dai label: {real_ip or 'Non trovato'}")
        print(f"MONITORING_HOST originale: {context.get('MONITORING_HOST', 'N/A')}")
        
        # PATCH: Sostituisce extend_context con la nostra versione
        patched_extend_context(context)
        
        # PATCH: Sostituisce construct_content con la nostra versione
        content_txt, content_html, attachments = patched_construct_content(context)
        
        # Continua con logica standard CheckMK
        target = context["CONTACTEMAIL"]
        from_address = default_from_address()
        subject = context.get("SUBJECT", "CheckMK Notification")
        
        message = multipart_mail(
            target=MailString(target),
            subject=subject,
            from_address=MailString(from_address),
            content_txt=content_txt,
            content_html=content_html,
            attachments=attachments,
        )
        
        exit_code = send_mail(message, target, from_address, context)
        
        if exit_code == 0:
            print("Email con real_ip e grafici inviata con successo")
        else:
            print(f"Errore invio email: {exit_code}")
            
        sys.exit(exit_code)
        
    except Exception as e:
        print(f"ERRORE: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()